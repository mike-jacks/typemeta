package main

import (
	"bytes"
	"errors"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"path/filepath"
	"strings"
)

const MODULE_NAME = "github.com/mike-jacks/typemeta"

func main() {
	log.Println("Running typemeta-gen...")
	if err := GenerateMetadata(); err != nil {
		log.Fatal(err)
	}
}

func GenerateMetadata() error {
	packageBuffers := make(map[string]*bytes.Buffer)
	packageImports := make(map[string]bool)

	err := filepath.Walk(".", func(path string, info os.FileInfo, err error) error {
		if err != nil || strings.HasSuffix(path, "_test.go") || !strings.HasSuffix(path, ".go") {
			return nil
		}

		fset := token.NewFileSet()
		fileNode, err := parser.ParseFile(fset, path, nil, parser.ParseComments)
		if err != nil {
			return err
		}

		pkgName := fileNode.Name.Name
		buf, ok := packageBuffers[pkgName]
		if !ok {
			buf = &bytes.Buffer{}
			fmt.Fprintln(buf, "// Code generated by typemeta-gen. DO NOT EDIT.")
			fmt.Fprintf(buf, "package %s\n\n", pkgName)
			fmt.Fprintf(buf, "import \"%s\"\n\n", MODULE_NAME)
			fmt.Fprintln(buf, "func init() {")
			packageBuffers[pkgName] = buf
			packageImports[pkgName] = false
		}

		for _, decl := range fileNode.Decls {
			gen, ok := decl.(*ast.GenDecl)
			if !ok || gen.Tok != token.TYPE {
				continue
			}

			for _, spec := range gen.Specs {
				ts, ok := spec.(*ast.TypeSpec)
				if !ok {
					continue
				}
				if _, ok := ts.Type.(*ast.StructType); !ok {
					continue
				}

				typeName := ts.Name.Name

				if gen.Doc != nil {
					for _, comment := range gen.Doc.List {
						line := strings.TrimSpace(strings.TrimPrefix(comment.Text, "//"))
						if strings.HasPrefix(line, "+typemeta:") {
							parts := strings.SplitN(strings.TrimPrefix(line, "+typemeta:"), "=", 2)
							if len(parts) == 2 {
								key := strings.TrimSpace(parts[0])
								value := strings.TrimSpace(parts[1])
								fmt.Fprintf(buf, "\ttypemeta.Register[%s](\"%s\", \"%s\")\n", typeName, key, value)
							} else {
								msg := fmt.Sprintf("your +typemeta: syntax is incorrect. You entered this: '// %s'. Valid Example: '// +typemeta:key=value'\n", line)
								log.Print(msg)
								return errors.New(msg)
							}
						}
					}
				}
			}
		}
		return nil
	})
	if err != nil {
		return fmt.Errorf("unable to generate metadata: %w", err)
	}

	// Write out files
	for pkg, buf := range packageBuffers {
		fmt.Fprintln(buf, "}")
		filename := fmt.Sprintf("%s/typemeta_gen.go", pkg)
		if pkg == "main" {
			filename = "typemeta_gen.go"
		}
		err := os.WriteFile(filename, buf.Bytes(), 0o644)
		if err != nil {
			return fmt.Errorf("writing file for package %s: %w", pkg, err)
		}
		log.Printf("Generated: %s\n", filename)
	}
	return nil
}
